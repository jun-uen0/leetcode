# https://leetcode.com/problems/partition-list

# Problem:
# Given the head of a linked list and a value x,
# partition it such that all nodes less than x come less nodes greater than or equal to x.
# You should preserve the original relative order of the nodes in each of the two partitions.

# Example 1:
# Input: head = [1,4,3,2,5,2], x = 3
# Output: [1,2,2,4,3,5]

# Constraints:
# The number of nodes in the list is in the range [0, 200].
# -100 <= Node.val <= 100
# -200 <= x <= 200

# Test:
# head: List = [1,4,3,2,5,2]
# head:    = ListNode{val: 1, next: ListNode{val: 4, next: ListNode{val: 3, next: ListNode{val: 2, next: ListNode{val: 5, next: ListNode{val: 2, next: None}}}}}}
# print(head.val) 1
# print(head.next.val) 4
# print(head.next.next.val) 3
# x = 3

# Solution:
# Create two list empty
# Append number less than x to one list -> [1,2,2]
# Append number greater than or equal to x to another list [4,3,5]
# And then merge the two lists -> [1,2,2] + [4,3,5] -> [1,2,2,4,3,5]

# Solution generated by copilot 1:
# 1. Create two lists, one for nodes less than x and one for nodes greater than or equal to x.
# 2. Iterate through the list and append nodes to the appropriate list.
# 3. Append the two lists together.

# Solution generated by copilot 2:
# 1. Create two lists, one for nodes less than x, one for nodes greater than or equal to x.
# 2. Traverse the list, and append the node to the appropriate list.
# 3. Return the two lists.

# Definition for singly-linked list.
from typing import Optional
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next
class Solution:
  def partition(self, head: Optional[ListNode], x: int) -> Optional[ListNode]:
    # Make two empty ListNode
    less = less_head = ListNode(0) # less_head is the head of the list
    grtr = grtr_head = ListNode(0) # grtr_head is the head of the list
    while head: # Iterate through the list
      print(head)
      if head.val < x:
        less.next = head
        less = less.next
      else:
        grtr.next = head
        grtr = grtr.next
      head = head.next # Go to the next node
    grtr.next = None # Set the tail of the list
    less.next = grtr_head.next # Append the two lists
    return less_head.next # Return the head of the list